{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { Globals } from '@react-spring/core';\nexport * from '@react-spring/core';\nimport { createStringInterpolator } from '@react-spring/shared/stringInterpolation';\nimport { is, each } from '@react-spring/shared';\nimport { AnimatedObject, isAnimated, AnimatedArray, AnimatedValue, to, extendAnimated, withAnimated } from '@react-spring/animated';\nimport colorNames from '@react-spring/shared/colors';\nlet isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\nconst prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);\n\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O'];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => acc[prefixKey(prefix, prop)] = acc[prop]);\n  return acc;\n}, isUnitlessNumber);\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  if (value == null || typeof value === 'boolean' || value === '') return '';\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n\n  return ('' + value).trim();\n}\n\nconst attributeCache = {};\n\nfunction applyAnimatedValues(instance, props) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false;\n  }\n\n  const style = props.style,\n        children = props.children,\n        scrollTop = props.scrollTop,\n        scrollLeft = props.scrollLeft,\n        attributes = _objectWithoutPropertiesLoose(props, [\"style\", \"children\", \"scrollTop\", \"scrollLeft\"]);\n\n  if (scrollTop !== void 0) instance.scrollTop = scrollTop;\n  if (scrollLeft !== void 0) instance.scrollLeft = scrollLeft; // Set textContent, if children is an animatable value\n\n  if (children !== void 0) instance.textContent = children; // Apply CSS styles\n\n  for (let styleName in style) {\n    if (!style.hasOwnProperty(styleName)) continue;\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    var styleValue = dangerousStyleValue(styleName, style[styleName], isCustomProperty);\n    if (styleName === 'float') styleName = 'cssFloat';\n    if (isCustomProperty) instance.style.setProperty(styleName, styleValue);else instance.style[styleName] = styleValue;\n  }\n\n  const isFilterElement = instance.nodeName === 'filter' || instance.parentNode && instance.parentNode.nodeName === 'filter'; // Apply DOM attributes\n\n  for (let name in attributes) {\n    // Attributes are written in dash case\n    const attributeName = isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, n => '-' + n.toLowerCase()));\n    instance.setAttribute(attributeName, attributes[name]);\n  }\n}\n/** The transform-functions\r\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\r\n * that you can pass as keys to your animated component style and that will be\r\n * animated. Perspective has been left out as it would conflict with the\r\n * non-transform perspective style.\r\n */\n\n\nconst domTransforms = ['transform', 'matrix', 'translate', 'scale', 'rotate', 'skew']; // x, y, z and translate will get 'px' as unit default\n\nconst pxDefaults = ['x', 'y', 'z', 'translate']; // rotate and skew will get 'deg' as unit default\n\nconst dgDefaults = ['rotate', 'skew']; // adds a unit to the value when the value is unit-less (ie a number)\n\nconst mergeUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value; // gets the default unit for a key\n\n\nconst getUnit = key => pxDefaults.some(name => key.startsWith(name)) ? 'px' : dgDefaults.some(name => key.startsWith(name)) ? 'deg' : '';\n/**\r\n * Returns the right Animated object based on the value type.\r\n *\r\n * x: AnimatedValue         --> x\r\n * 40px                     --> AnimatedValue(40px)\r\n * [40, 30]                 --> AnimatedValue([40,30])\r\n * [40, y: AnimatedValue]   --> AnimatedArray([AnimatedValue(40), y])\r\n *\r\n * @param value\r\n */\n\n\nconst ensureAnimated = function ensureAnimated(value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return is.arr(value) && value.some(isAnimated) ? new AnimatedArray(value.map(ensureAnimated)) : isAnimated(value) ? value : new AnimatedValue(value);\n};\n/**\r\n * Checks if the input value matches the identity value.\r\n *\r\n * isValueIdentity(0, 0)              --> true\r\n * isValueIdentity('0px', 0)          --> true\r\n * isValueIdentity([0, '0px', 0], 0)  --> true\r\n *\r\n * @param styleValue\r\n * @param id\r\n */\n\n\nconst isValueIdentity = (styleValue, id) => is.arr(styleValue) ? styleValue.every(v => isValueIdentity(v, id)) : is.num(styleValue) ? styleValue === id : parseFloat(styleValue) === id;\n/**\r\n * Checks if the style value is the identity for a given key.\r\n *\r\n * isTransformIdentity('scale', 1)               --> true\r\n * isTransformIdentity('scale', [1,1])\r\n * isTransformIdentity('rotate3d', [1,1,1,0])    --> true\r\n * isTransformIdentity('x', 0)                   --> true\r\n *\r\n * @param key\r\n * @param styleValue\r\n */\n\n\nconst isTransformIdentity = (key, styleValue) => key === 'rotate3d' ? isValueIdentity(is.arr(styleValue) ? styleValue[3] : styleValue, 0) : key.startsWith('scale') ? isValueIdentity(styleValue, 1) : isValueIdentity(styleValue, 0);\n/**\r\n * This AnimatedStyle will simplify animated components transforms by\r\n * interpolating all transform function passed as keys in the style object\r\n * including shortcuts such as x, y and z for translateX/Y/Z\r\n */\n\n\nclass AnimatedStyle extends AnimatedObject {\n  constructor(_ref) {\n    if (_ref === void 0) {\n      _ref = {};\n    }\n\n    let _ref2 = _ref,\n        x = _ref2.x,\n        y = _ref2.y,\n        z = _ref2.z,\n        style = _objectWithoutPropertiesLoose(_ref2, [\"x\", \"y\", \"z\"]);\n\n    const props = []; // transforms will be an array of functions applied to the props. Each function\n    // will return the interpolated transformed string, and a flag indicating if the\n    // interpolation result is an identity transform of its own\n\n    const transforms = []; // first we deal with x, y, z to group them into a single translate3d\n\n    if (x || y || z) {\n      // xyz should be an AnimatedValue or AnimatedArray\n      const xyz = ensureAnimated([x || 0, y || 0, z || 0]); // we add it to the array of Animated objects that will be interpolated\n\n      props.push(xyz); // we add the interpolation function to our transform array\n\n      transforms.push(_ref3 => {\n        let vx = _ref3[0],\n            vy = _ref3[1],\n            vz = _ref3[2];\n        return [\"translate3d(\".concat(mergeUnit(vx, getUnit('x')), \",\").concat(mergeUnit(vy, getUnit('y')), \",\").concat(mergeUnit(vz, getUnit('z')), \")\"), isValueIdentity([vx, vy, vz], 0)];\n      });\n    } // then for each style key that matches the transform functions class\n    // supports, we add the input value to the props and the interpolation\n    // transform function\n\n\n    each(style, (value, key) => {\n      if (domTransforms.some(transform => key.startsWith(transform))) {\n        const unit = getUnit(key);\n        props.push(ensureAnimated(value));\n        transforms.push(key === 'transform' ? transform => [transform, transform === ''] : key === 'rotate3d' ? _ref4 => {\n          let x = _ref4[0],\n              y = _ref4[1],\n              z = _ref4[2],\n              deg = _ref4[3];\n          return [\"rotate3d(\".concat(x, \",\").concat(y, \",\").concat(z, \",\").concat(mergeUnit(deg, unit), \")\"), isTransformIdentity(key, deg)];\n        } : arg => [is.arr(arg) ? \"\".concat(key, \"(\").concat(arg.map(v => mergeUnit(v, unit)).join(','), \")\") : \"\".concat(key, \"(\").concat(mergeUnit(arg, unit), \")\"), isTransformIdentity(key, arg)]);\n        delete style[key];\n      }\n    }); // finally, we set the transform key of the animated style to the\n    // interpolation of all the props, using the transform functions we defined\n    // above\n\n    if (props.length > 0) {\n      style.transform = to(props, function () {\n        let transform = '';\n        let identity = true;\n\n        for (let i = 0; i < arguments.length; i++) {\n          const _transforms$i = transforms[i](i < 0 || arguments.length <= i ? undefined : arguments[i]),\n                t = _transforms$i[0],\n                id = _transforms$i[1];\n\n          transform += ' ' + t;\n          identity = identity && id;\n        } // if the identity flag was true for all transforms, we set the transform\n        // to none, otherwise we return the concatenated transform string\n\n\n        return identity ? 'none' : transform;\n      });\n    }\n\n    super(style);\n  }\n\n}\n\nconst elements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG\n'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];\nconst animated = extendAnimated(withAnimated, elements);\nGlobals.assign({\n  defaultElement: 'div',\n  colorNames,\n  applyAnimatedValues,\n  createStringInterpolator,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  getComponentProps: _ref => {\n    let scrollTop = _ref.scrollTop,\n        scrollLeft = _ref.scrollLeft,\n        props = _objectWithoutPropertiesLoose(_ref, [\"scrollTop\", \"scrollLeft\"]);\n\n    return props;\n  }\n});\nexport { animated as a, animated };","map":null,"metadata":{},"sourceType":"module"}